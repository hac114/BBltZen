// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(BubbleTeaContext))]
    partial class BubbleTeaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Articolo", b =>
                {
                    b.Property<int>("ArticoloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticoloId"));

                    b.Property<DateTime?>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tipo");

                    b.HasKey("ArticoloId")
                        .HasName("PK__ARTICOLO__2902CE994A30025C");

                    b.ToTable("ARTICOLO", (string)null);
                });

            modelBuilder.Entity("Database.BevandaCustom", b =>
                {
                    b.Property<int>("BevandaCustomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bevanda_custom_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BevandaCustomId"));

                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersCustomId")
                        .HasColumnType("int")
                        .HasColumnName("pers_custom_id");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("prezzo");

                    b.HasKey("BevandaCustomId")
                        .HasName("PK__BEVANDA___BE6DF8267D771204");

                    b.HasIndex("ArticoloId");

                    b.HasIndex("PersCustomId");

                    b.ToTable("BEVANDA_CUSTOM", null, t =>
                        {
                            t.HasTrigger("TR_BEVANDA_CUSTOM_CalcolaPrezzo");

                            t.HasTrigger("trg_BEVANDA_CUSTOM_UpdatePrice");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.BevandaStandard", b =>
                {
                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DimensioneBicchiereId")
                        .HasColumnType("int")
                        .HasColumnName("dimensione_bicchiere_id");

                    b.Property<bool>("Disponibile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("disponibile");

                    b.Property<string>("ImmagineUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("immagine_url");

                    b.Property<int>("PersonalizzazioneId")
                        .HasColumnType("int")
                        .HasColumnName("personalizzazione_id");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo");

                    b.Property<int>("Priorita")
                        .HasColumnType("int")
                        .HasColumnName("priorita");

                    b.Property<bool>("SempreDisponibile")
                        .HasColumnType("bit")
                        .HasColumnName("sempre_disponibile");

                    b.HasKey("ArticoloId")
                        .HasName("PK_BevandaStandard_ARTICOLO");

                    b.HasIndex("DimensioneBicchiereId");

                    b.HasIndex("PersonalizzazioneId");

                    b.ToTable("BEVANDA_STANDARD", (string)null);
                });

            modelBuilder.Entity("Database.CategoriaIngrediente", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoria");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria_ingrediente", (string)null);
                });

            modelBuilder.Entity("Database.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TavoloId")
                        .HasColumnType("int")
                        .HasColumnName("tavolo_id");

                    b.HasKey("ClienteId")
                        .HasName("PK__CLIENTE__47E34D64C3A9E5CD");

                    b.HasIndex("TavoloId");

                    b.ToTable("CLIENTE", (string)null);
                });

            modelBuilder.Entity("Database.ConfigSoglieTempi", b =>
                {
                    b.Property<int>("SogliaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("soglia_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SogliaId"));

                    b.Property<DateTime?>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SogliaAttenzione")
                        .HasColumnType("int")
                        .HasColumnName("soglia_attenzione");

                    b.Property<int>("SogliaCritico")
                        .HasColumnType("int")
                        .HasColumnName("soglia_critico");

                    b.Property<int>("StatoOrdineId")
                        .HasColumnType("int")
                        .HasColumnName("stato_ordine_id");

                    b.Property<string>("UtenteAggiornamento")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("utente_aggiornamento");

                    b.HasKey("SogliaId")
                        .HasName("PK__CONFIG_S__8D105E6D4CEE88F6");

                    b.HasIndex("StatoOrdineId");

                    b.ToTable("CONFIG_SOGLIE_TEMPI", (string)null);
                });

            modelBuilder.Entity("Database.DimensioneBicchiere", b =>
                {
                    b.Property<int>("DimensioneBicchiereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dimensione_bicchiere_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DimensioneBicchiereId"));

                    b.Property<decimal>("Capienza")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("capienza");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("descrizione");

                    b.Property<decimal>("Moltiplicatore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(100m)
                        .HasColumnName("moltiplicatore");

                    b.Property<decimal>("PrezzoBase")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("prezzo_base");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("sigla")
                        .IsFixedLength();

                    b.Property<int>("UnitaMisuraId")
                        .HasColumnType("int")
                        .HasColumnName("unita_misura_id");

                    b.HasKey("DimensioneBicchiereId");

                    b.HasIndex("UnitaMisuraId");

                    b.ToTable("Dimensione_bicchiere", (string)null);
                });

            modelBuilder.Entity("Database.DimensioneQuantitaIngredienti", b =>
                {
                    b.Property<int>("DimensioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dimensione_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DimensioneId"));

                    b.Property<int>("DimensioneBicchiereId")
                        .HasColumnType("int")
                        .HasColumnName("dimensione_bicchiere_id");

                    b.Property<decimal>("Moltiplicatore")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("moltiplicatore");

                    b.Property<int>("PersonalizzazioneIngredienteId")
                        .HasColumnType("int")
                        .HasColumnName("personalizzazione_ingrediente_id");

                    b.HasKey("DimensioneId");

                    b.HasIndex("DimensioneBicchiereId");

                    b.HasIndex("PersonalizzazioneIngredienteId");

                    b.ToTable("Dimensione_quantita_ingredienti", (string)null);
                });

            modelBuilder.Entity("Database.Dolce", b =>
                {
                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descrizione");

                    b.Property<bool>("Disponibile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("disponibile");

                    b.Property<string>("ImmagineUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("immagine_url");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo");

                    b.Property<int>("Priorita")
                        .HasColumnType("int")
                        .HasColumnName("priorita");

                    b.HasKey("ArticoloId")
                        .HasName("PK__DOLCE__2902CE99651286CB");

                    b.ToTable("DOLCE", null, t =>
                        {
                            t.HasTrigger("trg_DolceAfterInsert");

                            t.HasTrigger("trg_DolceAfterUpdate");

                            t.HasTrigger("trg_UpdateDolce");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.Ingrediente", b =>
                {
                    b.Property<int>("IngredienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredienteId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_inserimento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Disponibile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("disponibile");

                    b.Property<string>("Ingrediente1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ingrediente");

                    b.Property<decimal>("PrezzoAggiunto")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo_aggiunto");

                    b.HasKey("IngredienteId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Ingrediente", t =>
                        {
                            t.HasTrigger("trg_Ingrediente_Update_Disponibilita");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.IngredientiPersonalizzazione", b =>
                {
                    b.Property<int>("IngredientePersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_pers_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientePersId"));

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_id");

                    b.Property<int>("PersCustomId")
                        .HasColumnType("int")
                        .HasColumnName("pers_custom_id");

                    b.HasKey("IngredientePersId")
                        .HasName("PK__INGREDIE__115C7C85D6FAB05C");

                    b.HasIndex("IngredienteId");

                    b.HasIndex(new[] { "PersCustomId", "IngredienteId" }, "UC_INGREDIENTE_PERSONALIZZAZIONE")
                        .IsUnique();

                    b.HasIndex(new[] { "PersCustomId", "IngredienteId" }, "UQ_Ingredienti_Personalizzazione")
                        .IsUnique();

                    b.ToTable("INGREDIENTI_PERSONALIZZAZIONE", (string)null);
                });

            modelBuilder.Entity("Database.LogAccessi", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dettagli")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("dettagli");

                    b.Property<string>("Esito")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("esito");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("TipoAccesso")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_accesso");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<int?>("UtenteId")
                        .HasColumnType("int")
                        .HasColumnName("utente_id");

                    b.HasKey("LogId")
                        .HasName("PK__LogAcces__9E2397E007CE0209");

                    b.HasIndex("ClienteId");

                    b.HasIndex(new[] { "DataCreazione" }, "IX_LogAccessi_DataCreazione");

                    b.HasIndex(new[] { "Esito" }, "IX_LogAccessi_Esito");

                    b.HasIndex(new[] { "UtenteId" }, "IX_LogAccessi_UtenteID");

                    b.ToTable("LogAccessi");
                });

            modelBuilder.Entity("Database.LogAttivita", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("DataEsecuzione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_esecuzione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("descrizione");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dettagli");

                    b.Property<string>("TipoAttivita")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_attivita");

                    b.HasKey("LogId")
                        .HasName("PK__LOG_ATTI__9E2397E0530D85AD");

                    b.ToTable("LOG_ATTIVITA", (string)null);
                });

            modelBuilder.Entity("Database.MigrationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("audit_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<DateTime?>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("executed_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExecutedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("executed_by")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("MigrationPhase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("migration_phase");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("object_name");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("object_type");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("operation_type");

                    b.HasKey("AuditId")
                        .HasName("PK__Migratio__5AF33E334196E2F6");

                    b.ToTable("Migration_Audit", (string)null);
                });

            modelBuilder.Entity("Database.NotificheOperative", b =>
                {
                    b.Property<int>("NotificaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notifica_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificaId"));

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataGestione")
                        .HasColumnType("datetime")
                        .HasColumnName("data_gestione");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("messaggio");

                    b.Property<string>("OrdiniCoinvolti")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ordini_coinvolti");

                    b.Property<int?>("Priorita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("priorita");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("da_gestire")
                        .HasColumnName("stato");

                    b.Property<string>("UtenteGestione")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("utente_gestione");

                    b.HasKey("NotificaId")
                        .HasName("PK__NOTIFICH__815AD28D318491A2");

                    b.ToTable("NOTIFICHE_OPERATIVE", (string)null);
                });

            modelBuilder.Entity("Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Imponibile")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("imponibile");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<decimal>("PrezzoUnitario")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo_unitario");

                    b.Property<int>("Quantita")
                        .HasColumnType("int")
                        .HasColumnName("quantita");

                    b.Property<decimal>("ScontoApplicato")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("sconto_applicato");

                    b.Property<int>("TaxRateId")
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    b.Property<string>("TipoArticolo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("tipo_articolo")
                        .IsFixedLength();

                    b.Property<decimal?>("TotaleIvato")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totale_ivato");

                    b.HasKey("OrderItemId")
                        .HasName("PK__ORDER_IT__3764B6BC4BD27D7B");

                    b.HasIndex("OrdineId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex(new[] { "ArticoloId" }, "IX_ORDER_ITEM_articolo_id");

                    b.HasIndex(new[] { "PrezzoUnitario", "Quantita" }, "IX_ORDER_ITEM_prezzo_quantita_composite");

                    b.ToTable("ORDER_ITEM", null, t =>
                        {
                            t.HasTrigger("trg_ORDER_ITEM_Calculate");

                            t.HasTrigger("trg_ORDER_ITEM_CreateTime");

                            t.HasTrigger("trg_ORDINE_UpdateTotal");

                            t.HasTrigger("trg_OrderItemAfterInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.Ordine", b =>
                {
                    b.Property<int>("OrdineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdineId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Priorita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("priorita");

                    b.Property<int?>("StatoOrdineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("stato_ordine_id");

                    b.Property<int?>("StatoPagamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("stato_pagamento_id");

                    b.Property<decimal>("Totale")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totale");

                    b.HasKey("OrdineId")
                        .HasName("PK__ORDINE__B828CB6AE214FF1E");

                    b.HasIndex("ClienteId");

                    b.HasIndex("StatoOrdineId");

                    b.HasIndex("StatoPagamentoId");

                    b.ToTable("ORDINE", null, t =>
                        {
                            t.HasTrigger("trg_ORDINE_AfterUpdate");

                            t.HasTrigger("trg_TrackingStatiOrdine");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.Personalizzazione", b =>
                {
                    b.Property<int>("PersonalizzazioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personalizzazione_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalizzazioneId"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descrizione");

                    b.Property<DateTime>("DtCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome");

                    b.HasKey("PersonalizzazioneId");

                    b.ToTable("Personalizzazione");
                });

            modelBuilder.Entity("Database.PersonalizzazioneCustom", b =>
                {
                    b.Property<int>("PersCustomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pers_custom_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersCustomId"));

                    b.Property<DateTime>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DimensioneBicchiereId")
                        .HasColumnType("int")
                        .HasColumnName("dimensione_bicchiere_id");

                    b.Property<byte>("GradoDolcezza")
                        .HasColumnType("tinyint")
                        .HasColumnName("grado_dolcezza");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("PersCustomId")
                        .HasName("PK__PERSONAL__776FA86624F5A943");

                    b.HasIndex("DimensioneBicchiereId");

                    b.ToTable("PERSONALIZZAZIONE_CUSTOM", (string)null);
                });

            modelBuilder.Entity("Database.PersonalizzazioneIngrediente", b =>
                {
                    b.Property<int>("PersonalizzazioneIngredienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personalizzazione_ingrediente_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalizzazioneIngredienteId"));

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_id");

                    b.Property<int>("PersonalizzazioneId")
                        .HasColumnType("int")
                        .HasColumnName("personalizzazione_id");

                    b.Property<decimal>("Quantita")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("quantita");

                    b.Property<int>("UnitaMisuraId")
                        .HasColumnType("int")
                        .HasColumnName("unita_misura_id");

                    b.HasKey("PersonalizzazioneIngredienteId");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("UnitaMisuraId");

                    b.HasIndex(new[] { "PersonalizzazioneId", "IngredienteId" }, "UQ_Personalizzazione_Ingrediente")
                        .IsUnique();

                    b.ToTable("Personalizzazione_ingrediente", (string)null);
                });

            modelBuilder.Entity("Database.PreferitiCliente", b =>
                {
                    b.Property<int>("PreferitoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("preferito_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferitoId"));

                    b.Property<int>("BevandaId")
                        .HasColumnType("int")
                        .HasColumnName("bevanda_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("DataAggiunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiunta")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PreferitoId")
                        .HasName("PK__PREFERIT__5001C707488D07D4");

                    b.HasIndex("BevandaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("PREFERITI_CLIENTE", (string)null);
                });

            modelBuilder.Entity("Database.SessioniQr", b =>
                {
                    b.Property<Guid>("SessioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sessione_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("CodiceSessione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DataScadenza")
                        .HasColumnType("datetime")
                        .HasColumnName("data_scadenza");

                    b.Property<DateTime?>("DataUtilizzo")
                        .HasColumnType("datetime")
                        .HasColumnName("data_utilizzo");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("qr_code");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TavoloId")
                        .HasColumnType("int");

                    b.Property<bool?>("Utilizzato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("utilizzato");

                    b.HasKey("SessioneId")
                        .HasName("PK__Sessioni__4E8FD248FEDB2562");

                    b.HasIndex(new[] { "ClienteId" }, "IX_SessioniQR_ClienteID");

                    b.HasIndex(new[] { "QrCode" }, "IX_SessioniQR_QRCode");

                    b.HasIndex(new[] { "DataScadenza" }, "IX_SessioniQR_Scadenza")
                        .HasFilter("([utilizzato]=(0))");

                    b.ToTable("SessioniQR", (string)null);
                });

            modelBuilder.Entity("Database.StatisticheCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Metriche")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("metriche");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("periodo");

                    b.Property<string>("TipoStatistica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_statistica");

                    b.HasKey("Id")
                        .HasName("PK__STATISTI__3213E83FBC3EBA94");

                    b.ToTable("STATISTICHE_CACHE", (string)null);
                });

            modelBuilder.Entity("Database.StatoOrdine", b =>
                {
                    b.Property<int>("StatoOrdineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stato_ordine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatoOrdineId"));

                    b.Property<string>("StatoOrdine1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_ordine");

                    b.Property<bool>("Terminale")
                        .HasColumnType("bit")
                        .HasColumnName("terminale");

                    b.HasKey("StatoOrdineId");

                    b.ToTable("STATO_ORDINE", (string)null);
                });

            modelBuilder.Entity("Database.StatoPagamento", b =>
                {
                    b.Property<int>("StatoPagamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stato_pagamento_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatoPagamentoId"));

                    b.Property<string>("StatoPagamento1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_pagamento");

                    b.HasKey("StatoPagamentoId");

                    b.ToTable("STATO_PAGAMENTO", (string)null);
                });

            modelBuilder.Entity("Database.StatoStoricoOrdine", b =>
                {
                    b.Property<int>("StatoStoricoOrdineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stato_storico_ordine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatoStoricoOrdineId"));

                    b.Property<DateTime?>("Fine")
                        .HasColumnType("datetime")
                        .HasColumnName("fine");

                    b.Property<DateTime>("Inizio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("inizio")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<int>("StatoOrdineId")
                        .HasColumnType("int")
                        .HasColumnName("stato_ordine_id");

                    b.HasKey("StatoStoricoOrdineId")
                        .HasName("PK__STATO_ST__10AE0582261A0ADA");

                    b.HasIndex("OrdineId");

                    b.HasIndex("StatoOrdineId");

                    b.ToTable("STATO_STORICO_ORDINE", (string)null);
                });

            modelBuilder.Entity("Database.Tavolo", b =>
                {
                    b.Property<int>("TavoloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tavolo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TavoloId"));

                    b.Property<bool>("Disponibile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("disponibile");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("qr_code");

                    b.Property<string>("Zona")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("zona");

                    b.HasKey("TavoloId")
                        .HasName("PK__TAVOLO__72A0F5647A82716B");

                    b.HasIndex(new[] { "QrCode" }, "UQ__TAVOLO__E2FB88899E7A2257")
                        .IsUnique();

                    b.HasIndex(new[] { "Numero" }, "UQ__TAVOLO__FC77F211931F5723")
                        .IsUnique();

                    b.ToTable("TAVOLO", (string)null);
                });

            modelBuilder.Entity("Database.TaxRates", b =>
                {
                    b.Property<int>("TaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxRateId"));

                    b.Property<decimal>("Aliquota")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("aliquota");

                    b.Property<DateTime?>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descrizione");

                    b.HasKey("TaxRateId")
                        .HasName("PK__TAX_RATE__4B78B333D9257EB6");

                    b.ToTable("TAX_RATES", (string)null);
                });

            modelBuilder.Entity("Database.TempPriceCalculations", b =>
                {
                    b.Property<int>("TempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("temp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempId"));

                    b.Property<int?>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<string>("CalcolatoDa")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("calcolato_da")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<DateTime?>("DataCalcolo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_calcolo")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PersCustomId")
                        .HasColumnType("int")
                        .HasColumnName("pers_custom_id");

                    b.Property<decimal?>("PrezzoCalcolato")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("prezzo_calcolato");

                    b.HasKey("TempId")
                        .HasName("PK__Temp_Pri__FEEC6BDB2AF05344");

                    b.HasIndex(new[] { "ArticoloId" }, "IX_Temp_Price_Calculations_articolo");

                    b.ToTable("Temp_Price_Calculations", (string)null);
                });

            modelBuilder.Entity("Database.TriggerLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("details");

                    b.Property<int?>("ExecutionDurationMs")
                        .HasColumnType("int")
                        .HasColumnName("execution_duration_ms");

                    b.Property<DateTime?>("ExecutionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("execution_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrdersUpdated")
                        .HasColumnType("int")
                        .HasColumnName("orders_updated");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("trigger_name");

                    b.HasKey("LogId")
                        .HasName("PK__TRIGGER___9E2397E06F281AFD");

                    b.ToTable("TRIGGER_LOGS", (string)null);
                });

            modelBuilder.Entity("Database.UnitaDiMisura", b =>
                {
                    b.Property<int>("UnitaMisuraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unita_misura_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitaMisuraId"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("descrizione");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("sigla")
                        .IsFixedLength();

                    b.HasKey("UnitaMisuraId")
                        .HasName("PK_Unita_di_misura_1");

                    b.ToTable("Unita_di_misura", (string)null);
                });

            modelBuilder.Entity("Database.Utenti", b =>
                {
                    b.Property<int>("UtenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("utente_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtenteId"));

                    b.Property<bool?>("Attivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("attivo");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("DataAggiornamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("password_hash");

                    b.Property<string>("TipoUtente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_utente");

                    b.Property<DateTime?>("UltimoAccesso")
                        .HasColumnType("datetime")
                        .HasColumnName("ultimo_accesso");

                    b.HasKey("UtenteId")
                        .HasName("PK__UTENTI__758675A89F3207EE");

                    b.HasIndex(new[] { "ClienteId" }, "IX_UTENTI_ClienteID")
                        .HasFilter("([cliente_id] IS NOT NULL)");

                    b.HasIndex(new[] { "Email" }, "IX_UTENTI_Email");

                    b.HasIndex(new[] { "TipoUtente" }, "IX_UTENTI_TipoUtente");

                    b.HasIndex(new[] { "Email" }, "UQ__UTENTI__AB6E6164408A3EDD")
                        .IsUnique();

                    b.ToTable("UTENTI", null, t =>
                        {
                            t.HasTrigger("trg_UTENTI_UpdateDate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Database.VwArticoliCompleti", b =>
                {
                    b.Property<decimal?>("AliquotaIva")
                        .HasColumnType("numeric(4, 2)")
                        .HasColumnName("aliquota_iva");

                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)")
                        .HasColumnName("categoria");

                    b.Property<DateTime?>("DataAggiornamento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento");

                    b.Property<DateTime?>("DataCreazione")
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione");

                    b.Property<int?>("Disponibile")
                        .HasColumnType("int")
                        .HasColumnName("disponibile");

                    b.Property<string>("NomeArticolo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome_articolo");

                    b.Property<decimal?>("PrezzoBase")
                        .HasColumnType("decimal(38, 3)")
                        .HasColumnName("prezzo_base");

                    b.Property<string>("TipoArticolo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tipo_articolo");

                    b.ToTable((string)null);

                    b.ToView("vw_articoli_completi", (string)null);
                });

            modelBuilder.Entity("Database.VwBevandePreferiteClienti", b =>
                {
                    b.Property<bool>("BevandaDisponibile")
                        .HasColumnType("bit")
                        .HasColumnName("bevanda_disponibile");

                    b.Property<int>("BevandaId")
                        .HasColumnType("int")
                        .HasColumnName("bevanda_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("DataAggiunta")
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiunta");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descrizione");

                    b.Property<string>("ImmagineUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("immagine_url");

                    b.Property<decimal>("IvaPercentuale")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("iva_percentuale");

                    b.Property<string>("NomeBevanda")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome_bevanda");

                    b.Property<int>("PreferitoId")
                        .HasColumnType("int")
                        .HasColumnName("preferito_id");

                    b.Property<decimal?>("PrezzoLordo")
                        .HasColumnType("decimal(15, 8)")
                        .HasColumnName("prezzo_lordo");

                    b.Property<decimal>("PrezzoNetto")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo_netto");

                    b.Property<int>("TavoloId")
                        .HasColumnType("int")
                        .HasColumnName("tavolo_id");

                    b.ToTable((string)null);

                    b.ToView("VW_BEVANDE_PREFERITE_CLIENTI", (string)null);
                });

            modelBuilder.Entity("Database.VwCombinazioniPopolari", b =>
                {
                    b.Property<string>("Combinazione")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("combinazione");

                    b.Property<int?>("GiorniAttivita")
                        .HasColumnType("int")
                        .HasColumnName("giorni_attivita");

                    b.Property<int?>("NumeroIngredienti")
                        .HasColumnType("int")
                        .HasColumnName("numero_ingredienti");

                    b.Property<decimal?>("OrdiniPerGiorno")
                        .HasColumnType("numeric(24, 12)")
                        .HasColumnName("ordini_per_giorno");

                    b.Property<DateTime?>("PrimaDataOrdine")
                        .HasColumnType("datetime")
                        .HasColumnName("prima_data_ordine");

                    b.Property<DateTime?>("UltimaDataOrdine")
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_data_ordine");

                    b.Property<int?>("VolteOrdinate")
                        .HasColumnType("int")
                        .HasColumnName("volte_ordinate");

                    b.ToTable((string)null);

                    b.ToView("vw_combinazioni_popolari", (string)null);
                });

            modelBuilder.Entity("Database.VwDashboardAmministrativa", b =>
                {
                    b.Property<int>("LivelloPriorita")
                        .HasColumnType("int")
                        .HasColumnName("livello_priorita");

                    b.Property<double>("Mediana")
                        .HasColumnType("float")
                        .HasColumnName("mediana");

                    b.Property<double>("Percentile90")
                        .HasColumnType("float")
                        .HasColumnName("percentile_90");

                    b.Property<int>("SogliaAttenzione")
                        .HasColumnType("int")
                        .HasColumnName("soglia_attenzione");

                    b.Property<int>("SogliaCritico")
                        .HasColumnType("int")
                        .HasColumnName("soglia_critico");

                    b.Property<string>("StatoOrdine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_ordine");

                    b.Property<int>("StatoOrdineId")
                        .HasColumnType("int")
                        .HasColumnName("stato_ordine_id");

                    b.Property<int>("TempoMassimo")
                        .HasColumnType("int")
                        .HasColumnName("tempo_massimo");

                    b.Property<decimal>("TempoMedioMinuti")
                        .HasColumnType("decimal(38, 6)")
                        .HasColumnName("tempo_medio_minuti");

                    b.Property<string>("TooltipStatistiche")
                        .IsRequired()
                        .HasMaxLength(151)
                        .IsUnicode(false)
                        .HasColumnType("varchar(151)")
                        .HasColumnName("tooltip_statistiche");

                    b.Property<int?>("TotaleOrdini")
                        .HasColumnType("int")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_dashboard_amministrativa", (string)null);
                });

            modelBuilder.Entity("Database.VwDashboardSintesi", b =>
                {
                    b.Property<int?>("InRitardoCritico")
                        .HasColumnType("int")
                        .HasColumnName("in_ritardo_critico");

                    b.Property<int?>("MaxMinuti")
                        .HasColumnType("int")
                        .HasColumnName("max_minuti");

                    b.Property<int?>("Quantita")
                        .HasColumnType("int")
                        .HasColumnName("quantita");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("stato");

                    b.ToTable((string)null);

                    b.ToView("vw_dashboard_sintesi", (string)null);
                });

            modelBuilder.Entity("Database.VwDashboardStatistiche", b =>
                {
                    b.Property<DateOnly?>("DataRiferimento")
                        .HasColumnType("date")
                        .HasColumnName("data_riferimento");

                    b.Property<string>("FatturatoTotale")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("fatturato_totale");

                    b.Property<int?>("GiorniMesiPassati")
                        .HasColumnType("int")
                        .HasColumnName("giorni_mesi_passati");

                    b.Property<string>("OrdiniAnnullati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_annullati");

                    b.Property<string>("OrdiniConsegnati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_consegnati");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("periodo");

                    b.Property<string>("TempoMedioMinuti")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("tempo_medio_minuti");

                    b.Property<string>("TipoStatistica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_statistica");

                    b.Property<string>("TotaleOrdini")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_dashboard_statistiche", (string)null);
                });

            modelBuilder.Entity("Database.VwIngredientiPopolari", b =>
                {
                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoria");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_id");

                    b.Property<string>("NomeIngrediente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome_ingrediente");

                    b.Property<int?>("NumeroOrdiniContenenti")
                        .HasColumnType("int")
                        .HasColumnName("numero_ordini_contenenti");

                    b.Property<int?>("NumeroSelezioni")
                        .HasColumnType("int")
                        .HasColumnName("numero_selezioni");

                    b.Property<decimal?>("PercentualeTotale")
                        .HasColumnType("numeric(26, 12)")
                        .HasColumnName("percentuale_totale");

                    b.ToTable((string)null);

                    b.ToView("vw_ingredienti_popolari", (string)null);
                });

            modelBuilder.Entity("Database.VwIngredientiPopolariAdvanced", b =>
                {
                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoria");

                    b.Property<int?>("GiorniConSelezioni")
                        .HasColumnType("int")
                        .HasColumnName("giorni_con_selezioni");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int")
                        .HasColumnName("ingrediente_id");

                    b.Property<string>("NomeIngrediente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome_ingrediente");

                    b.Property<int?>("NumeroOrdiniContenenti")
                        .HasColumnType("int")
                        .HasColumnName("numero_ordini_contenenti");

                    b.Property<int?>("NumeroSelezioni")
                        .HasColumnType("int")
                        .HasColumnName("numero_selezioni");

                    b.Property<decimal?>("PercentualeSuOrdiniTotali")
                        .HasColumnType("numeric(26, 12)")
                        .HasColumnName("percentuale_su_ordini_totali");

                    b.Property<decimal?>("PercentualeTotale")
                        .HasColumnType("numeric(26, 12)")
                        .HasColumnName("percentuale_totale");

                    b.ToTable((string)null);

                    b.ToView("vw_ingredienti_popolari_advanced", (string)null);
                });

            modelBuilder.Entity("Database.VwMenuDinamico", b =>
                {
                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descrizione");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ImmagineUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("immagine_url");

                    b.Property<decimal>("IvaPercentuale")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("iva_percentuale");

                    b.Property<string>("NomeBevanda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome_bevanda");

                    b.Property<decimal?>("PrezzoLordo")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("prezzo_lordo");

                    b.Property<decimal>("PrezzoNetto")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("prezzo_netto");

                    b.Property<int>("Priorita")
                        .HasColumnType("int")
                        .HasColumnName("priorita");

                    b.Property<int>("TaxRateId")
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("tipo");

                    b.ToTable((string)null);

                    b.ToView("VW_MENU_DINAMICO", (string)null);
                });

            modelBuilder.Entity("Database.VwMonitoraggioOperativo", b =>
                {
                    b.Property<string>("LivelloAllerta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("livello_allerta");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasMaxLength(47)
                        .IsUnicode(false)
                        .HasColumnType("varchar(47)")
                        .HasColumnName("messaggio");

                    b.Property<int?>("MinutiInStato")
                        .HasColumnType("int")
                        .HasColumnName("minuti_in_stato");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<int>("RichiedeInterventoImmediato")
                        .HasColumnType("int")
                        .HasColumnName("richiede_intervento_immediato");

                    b.Property<int>("SogliaAttenzione")
                        .HasColumnType("int")
                        .HasColumnName("soglia_attenzione");

                    b.Property<int>("SogliaCritico")
                        .HasColumnType("int")
                        .HasColumnName("soglia_critico");

                    b.Property<string>("StatoOrdine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_ordine");

                    b.ToTable((string)null);

                    b.ToView("vw_monitoraggio_operativo", (string)null);
                });

            modelBuilder.Entity("Database.VwNotifichePendenti", b =>
                {
                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("messaggio");

                    b.Property<int?>("MinutiDaCreazione")
                        .HasColumnType("int")
                        .HasColumnName("minuti_da_creazione");

                    b.Property<int>("NotificaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notifica_id");

                    b.Property<string>("OrdiniCoinvolti")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ordini_coinvolti");

                    b.Property<int?>("Priorita")
                        .HasColumnType("int")
                        .HasColumnName("priorita");

                    b.ToTable((string)null);

                    b.ToView("vw_notifiche_pendenti", (string)null);
                });

            modelBuilder.Entity("Database.VwOrderCalculationSupport", b =>
                {
                    b.Property<int>("ArticoloId")
                        .HasColumnType("int")
                        .HasColumnName("articolo_id");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<decimal?>("PrezzoBase")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("prezzo_base");

                    b.Property<int>("Quantita")
                        .HasColumnType("int")
                        .HasColumnName("quantita");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("tax_rate");

                    b.Property<string>("TipoArticolo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("tipo_articolo")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("vw_Order_Calculation_Support", (string)null);
                });

            modelBuilder.Entity("Database.VwOrdiniAnnullati", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataAnnullamento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_annullamento");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione");

                    b.Property<int?>("MinutiPrimaAnnullamento")
                        .HasColumnType("int")
                        .HasColumnName("minuti_prima_annullamento");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<decimal>("Totale")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totale");

                    b.ToTable((string)null);

                    b.ToView("vw_ordini_annullati", (string)null);
                });

            modelBuilder.Entity("Database.VwOrdiniSospesi", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime")
                        .HasColumnName("data_creazione");

                    b.Property<string>("LivelloAllerta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("livello_allerta");

                    b.Property<int?>("MinutiSospeso")
                        .HasColumnType("int")
                        .HasColumnName("minuti_sospeso");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<decimal>("Totale")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totale");

                    b.ToTable((string)null);

                    b.ToView("vw_ordini_sospesi", (string)null);
                });

            modelBuilder.Entity("Database.VwStatisticheCache", b =>
                {
                    b.Property<DateTime?>("DataAggiornamento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento");

                    b.Property<DateOnly?>("DataRiferimento")
                        .HasColumnType("date")
                        .HasColumnName("data_riferimento");

                    b.Property<string>("FatturatoTotale")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("fatturato_totale");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("OrdiniAnnullati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_annullati");

                    b.Property<string>("OrdiniConsegnati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_consegnati");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("periodo");

                    b.Property<string>("TempoMedioMinuti")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("tempo_medio_minuti");

                    b.Property<string>("TipoStatistica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_statistica");

                    b.Property<string>("TotaleOrdini")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_statistiche_cache", (string)null);
                });

            modelBuilder.Entity("Database.VwStatisticheGiornaliere", b =>
                {
                    b.Property<DateOnly?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int?>("OrdiniAnnullati")
                        .HasColumnType("int")
                        .HasColumnName("ordini_annullati");

                    b.Property<int?>("OrdiniConsegnati")
                        .HasColumnType("int")
                        .HasColumnName("ordini_consegnati");

                    b.Property<int?>("TempoMedioCompletamentoMinuti")
                        .HasColumnType("int")
                        .HasColumnName("tempo_medio_completamento_minuti");

                    b.Property<int?>("TotaleOrdini")
                        .HasColumnType("int")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_statistiche_giornaliere", (string)null);
                });

            modelBuilder.Entity("Database.VwStatisticheMensili", b =>
                {
                    b.Property<int?>("Anno")
                        .HasColumnType("int")
                        .HasColumnName("anno");

                    b.Property<decimal?>("FatturatoTotale")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("fatturato_totale");

                    b.Property<int?>("Mese")
                        .HasColumnType("int")
                        .HasColumnName("mese");

                    b.Property<int?>("OrdiniAnnullati")
                        .HasColumnType("int")
                        .HasColumnName("ordini_annullati");

                    b.Property<int?>("TempoMedioCompletamentoMinuti")
                        .HasColumnType("int")
                        .HasColumnName("tempo_medio_completamento_minuti");

                    b.Property<int?>("TotaleOrdini")
                        .HasColumnType("int")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_statistiche_mensili", (string)null);
                });

            modelBuilder.Entity("Database.VwStatisticheOrdiniAvanzate", b =>
                {
                    b.Property<string>("LivelloAllerta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("livello_allerta");

                    b.Property<string>("MessaggioAllerta")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("messaggio_allerta");

                    b.Property<int?>("MinutiInStato")
                        .HasColumnType("int")
                        .HasColumnName("minuti_in_stato");

                    b.Property<int>("OrdineId")
                        .HasColumnType("int")
                        .HasColumnName("ordine_id");

                    b.Property<int?>("SogliaAttenzione")
                        .HasColumnType("int")
                        .HasColumnName("soglia_attenzione");

                    b.Property<int?>("SogliaCritico")
                        .HasColumnType("int")
                        .HasColumnName("soglia_critico");

                    b.Property<string>("StatoOrdine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_ordine");

                    b.ToTable((string)null);

                    b.ToView("vw_statistiche_ordini_avanzate", (string)null);
                });

            modelBuilder.Entity("Database.VwStatisticheRecenti", b =>
                {
                    b.Property<DateTime?>("DataAggiornamento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_aggiornamento");

                    b.Property<DateOnly?>("DataRiferimento")
                        .HasColumnType("date")
                        .HasColumnName("data_riferimento");

                    b.Property<string>("FatturatoTotale")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("fatturato_totale");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("OrdiniAnnullati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_annullati");

                    b.Property<string>("OrdiniConsegnati")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordini_consegnati");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("periodo");

                    b.Property<string>("TempoMedioMinuti")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("tempo_medio_minuti");

                    b.Property<string>("TipoStatistica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_statistica");

                    b.Property<string>("TotaleOrdini")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("totale_ordini");

                    b.ToTable((string)null);

                    b.ToView("vw_statistiche_recenti", (string)null);
                });

            modelBuilder.Entity("Database.VwTempiStato", b =>
                {
                    b.Property<int?>("NumeroOrdini")
                        .HasColumnType("int")
                        .HasColumnName("numero_ordini");

                    b.Property<string>("StatoOrdine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stato_ordine");

                    b.Property<int?>("TempoMassimoMinuti")
                        .HasColumnType("int")
                        .HasColumnName("tempo_massimo_minuti");

                    b.Property<int?>("TempoMedioMinuti")
                        .HasColumnType("int")
                        .HasColumnName("tempo_medio_minuti");

                    b.Property<int?>("TempoMinimoMinuti")
                        .HasColumnType("int")
                        .HasColumnName("tempo_minimo_minuti");

                    b.ToTable((string)null);

                    b.ToView("vw_tempi_stato", (string)null);
                });

            modelBuilder.Entity("Database.BevandaCustom", b =>
                {
                    b.HasOne("Database.Articolo", "Articolo")
                        .WithMany("BevandaCustom")
                        .HasForeignKey("ArticoloId")
                        .IsRequired()
                        .HasConstraintName("FK_BEVANDA_CUSTOM_ARTICOLO");

                    b.HasOne("Database.PersonalizzazioneCustom", "PersCustom")
                        .WithMany("BevandaCustom")
                        .HasForeignKey("PersCustomId")
                        .IsRequired()
                        .HasConstraintName("FK_BEVANDA_CUSTOM_PERSONALIZZAZIONE");

                    b.Navigation("Articolo");

                    b.Navigation("PersCustom");
                });

            modelBuilder.Entity("Database.BevandaStandard", b =>
                {
                    b.HasOne("Database.Articolo", "Articolo")
                        .WithOne("BevandaStandard")
                        .HasForeignKey("Database.BevandaStandard", "ArticoloId")
                        .IsRequired()
                        .HasConstraintName("FK__BEVANDA_S__artic__3DB3258D");

                    b.HasOne("Database.DimensioneBicchiere", "DimensioneBicchiere")
                        .WithMany("BevandaStandard")
                        .HasForeignKey("DimensioneBicchiereId")
                        .IsRequired()
                        .HasConstraintName("FK_BEVANDA_STANDARD_Dimensione_bicchiere");

                    b.HasOne("Database.Personalizzazione", "Personalizzazione")
                        .WithMany("BevandaStandard")
                        .HasForeignKey("PersonalizzazioneId")
                        .IsRequired()
                        .HasConstraintName("FK_BEVANDA_STANDARD_Personalizzazione");

                    b.Navigation("Articolo");

                    b.Navigation("DimensioneBicchiere");

                    b.Navigation("Personalizzazione");
                });

            modelBuilder.Entity("Database.Cliente", b =>
                {
                    b.HasOne("Database.Tavolo", "Tavolo")
                        .WithMany("Cliente")
                        .HasForeignKey("TavoloId")
                        .IsRequired()
                        .HasConstraintName("FK__CLIENTE__tavolo___6497E884");

                    b.Navigation("Tavolo");
                });

            modelBuilder.Entity("Database.ConfigSoglieTempi", b =>
                {
                    b.HasOne("Database.StatoOrdine", "StatoOrdine")
                        .WithMany("ConfigSoglieTempi")
                        .HasForeignKey("StatoOrdineId")
                        .IsRequired()
                        .HasConstraintName("FK__CONFIG_SO__stato__5CC1BC92");

                    b.Navigation("StatoOrdine");
                });

            modelBuilder.Entity("Database.DimensioneBicchiere", b =>
                {
                    b.HasOne("Database.UnitaDiMisura", "UnitaMisura")
                        .WithMany("DimensioneBicchiere")
                        .HasForeignKey("UnitaMisuraId")
                        .IsRequired()
                        .HasConstraintName("FK_Dimensione_bicchiere_Unita_di_misura");

                    b.Navigation("UnitaMisura");
                });

            modelBuilder.Entity("Database.DimensioneQuantitaIngredienti", b =>
                {
                    b.HasOne("Database.DimensioneBicchiere", "DimensioneBicchiere")
                        .WithMany("DimensioneQuantitaIngredienti")
                        .HasForeignKey("DimensioneBicchiereId")
                        .IsRequired()
                        .HasConstraintName("FK_Dimensione_quantita_ingredienti_Dimensione_bicchiere");

                    b.HasOne("Database.PersonalizzazioneIngrediente", "PersonalizzazioneIngrediente")
                        .WithMany("DimensioneQuantitaIngredienti")
                        .HasForeignKey("PersonalizzazioneIngredienteId")
                        .IsRequired()
                        .HasConstraintName("FK_Dimensione_quantita_ingredienti_Personalizzazione_ingrediente");

                    b.Navigation("DimensioneBicchiere");

                    b.Navigation("PersonalizzazioneIngrediente");
                });

            modelBuilder.Entity("Database.Dolce", b =>
                {
                    b.HasOne("Database.Articolo", "Articolo")
                        .WithOne("Dolce")
                        .HasForeignKey("Database.Dolce", "ArticoloId")
                        .IsRequired()
                        .HasConstraintName("FK__DOLCE__articolo___4924D839");

                    b.Navigation("Articolo");
                });

            modelBuilder.Entity("Database.Ingrediente", b =>
                {
                    b.HasOne("Database.CategoriaIngrediente", "Categoria")
                        .WithMany("Ingrediente")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_Ingrediente_Categoria_ingrediente");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Database.IngredientiPersonalizzazione", b =>
                {
                    b.HasOne("Database.Ingrediente", "Ingrediente")
                        .WithMany("IngredientiPersonalizzazione")
                        .HasForeignKey("IngredienteId")
                        .IsRequired()
                        .HasConstraintName("FK_INGREDIENTE");

                    b.HasOne("Database.PersonalizzazioneCustom", "PersCustom")
                        .WithMany("IngredientiPersonalizzazione")
                        .HasForeignKey("PersCustomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERS_CUSTOM");

                    b.Navigation("Ingrediente");

                    b.Navigation("PersCustom");
                });

            modelBuilder.Entity("Database.LogAccessi", b =>
                {
                    b.HasOne("Database.Cliente", "Cliente")
                        .WithMany("LogAccessi")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_LogAccessi_CLIENTE");

                    b.HasOne("Database.Utenti", "Utente")
                        .WithMany("LogAccessi")
                        .HasForeignKey("UtenteId")
                        .HasConstraintName("FK_LogAccessi_UTENTI");

                    b.Navigation("Cliente");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Database.OrderItem", b =>
                {
                    b.HasOne("Database.Articolo", "Articolo")
                        .WithMany("OrderItem")
                        .HasForeignKey("ArticoloId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Articolo");

                    b.HasOne("Database.Ordine", "Ordine")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrdineId")
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_ITEM_ORDINE");

                    b.HasOne("Database.TaxRates", "TaxRate")
                        .WithMany("OrderItem")
                        .HasForeignKey("TaxRateId")
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_ITEM_TAX_RATES");

                    b.Navigation("Articolo");

                    b.Navigation("Ordine");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Database.Ordine", b =>
                {
                    b.HasOne("Database.Cliente", "Cliente")
                        .WithMany("Ordine")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK__ORDINE__cliente___6C390A4C");

                    b.HasOne("Database.StatoOrdine", "StatoOrdine")
                        .WithMany("Ordine")
                        .HasForeignKey("StatoOrdineId")
                        .HasConstraintName("FK__ORDINE__stato_or__6D2D2E85");

                    b.HasOne("Database.StatoPagamento", "StatoPagamento")
                        .WithMany("Ordine")
                        .HasForeignKey("StatoPagamentoId")
                        .HasConstraintName("FK__ORDINE__stato_pa__6E2152BE");

                    b.Navigation("Cliente");

                    b.Navigation("StatoOrdine");

                    b.Navigation("StatoPagamento");
                });

            modelBuilder.Entity("Database.PersonalizzazioneCustom", b =>
                {
                    b.HasOne("Database.DimensioneBicchiere", "DimensioneBicchiere")
                        .WithMany("PersonalizzazioneCustom")
                        .HasForeignKey("DimensioneBicchiereId")
                        .IsRequired()
                        .HasConstraintName("FK_DIMENSIONE_BICCHIERE");

                    b.Navigation("DimensioneBicchiere");
                });

            modelBuilder.Entity("Database.PersonalizzazioneIngrediente", b =>
                {
                    b.HasOne("Database.Ingrediente", "Ingrediente")
                        .WithMany("PersonalizzazioneIngrediente")
                        .HasForeignKey("IngredienteId")
                        .IsRequired()
                        .HasConstraintName("FK_Personalizzazione_ingrediente_Ingrediente");

                    b.HasOne("Database.Personalizzazione", "Personalizzazione")
                        .WithMany("PersonalizzazioneIngrediente")
                        .HasForeignKey("PersonalizzazioneId")
                        .IsRequired()
                        .HasConstraintName("FK_Personalizzazione_ingrediente_Personalizzazione");

                    b.HasOne("Database.UnitaDiMisura", "UnitaMisura")
                        .WithMany("PersonalizzazioneIngrediente")
                        .HasForeignKey("UnitaMisuraId")
                        .IsRequired()
                        .HasConstraintName("FK_Personalizzazione_ingrediente_Unita_di_misura");

                    b.Navigation("Ingrediente");

                    b.Navigation("Personalizzazione");

                    b.Navigation("UnitaMisura");
                });

            modelBuilder.Entity("Database.PreferitiCliente", b =>
                {
                    b.HasOne("Database.BevandaStandard", "Bevanda")
                        .WithMany("PreferitiCliente")
                        .HasForeignKey("BevandaId")
                        .IsRequired()
                        .HasConstraintName("FK__PREFERITI__bevan__69E6AD86");

                    b.HasOne("Database.Cliente", "Cliente")
                        .WithMany("PreferitiCliente")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK__PREFERITI__clien__68F2894D");

                    b.Navigation("Bevanda");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Database.SessioniQr", b =>
                {
                    b.HasOne("Database.Cliente", null)
                        .WithMany("SessioniQr")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("Database.StatoStoricoOrdine", b =>
                {
                    b.HasOne("Database.Ordine", "Ordine")
                        .WithMany("StatoStoricoOrdine")
                        .HasForeignKey("OrdineId")
                        .IsRequired()
                        .HasConstraintName("FK__STATO_STO__ordin__5708E33C");

                    b.HasOne("Database.StatoOrdine", "StatoOrdine")
                        .WithMany("StatoStoricoOrdine")
                        .HasForeignKey("StatoOrdineId")
                        .IsRequired()
                        .HasConstraintName("FK__STATO_STO__stato__57FD0775");

                    b.Navigation("Ordine");

                    b.Navigation("StatoOrdine");
                });

            modelBuilder.Entity("Database.Utenti", b =>
                {
                    b.HasOne("Database.Cliente", "Cliente")
                        .WithMany("Utenti")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_UTENTI_CLIENTE");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Database.Articolo", b =>
                {
                    b.Navigation("BevandaCustom");

                    b.Navigation("BevandaStandard");

                    b.Navigation("Dolce");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Database.BevandaStandard", b =>
                {
                    b.Navigation("PreferitiCliente");
                });

            modelBuilder.Entity("Database.CategoriaIngrediente", b =>
                {
                    b.Navigation("Ingrediente");
                });

            modelBuilder.Entity("Database.Cliente", b =>
                {
                    b.Navigation("LogAccessi");

                    b.Navigation("Ordine");

                    b.Navigation("PreferitiCliente");

                    b.Navigation("SessioniQr");

                    b.Navigation("Utenti");
                });

            modelBuilder.Entity("Database.DimensioneBicchiere", b =>
                {
                    b.Navigation("BevandaStandard");

                    b.Navigation("DimensioneQuantitaIngredienti");

                    b.Navigation("PersonalizzazioneCustom");
                });

            modelBuilder.Entity("Database.Ingrediente", b =>
                {
                    b.Navigation("IngredientiPersonalizzazione");

                    b.Navigation("PersonalizzazioneIngrediente");
                });

            modelBuilder.Entity("Database.Ordine", b =>
                {
                    b.Navigation("OrderItem");

                    b.Navigation("StatoStoricoOrdine");
                });

            modelBuilder.Entity("Database.Personalizzazione", b =>
                {
                    b.Navigation("BevandaStandard");

                    b.Navigation("PersonalizzazioneIngrediente");
                });

            modelBuilder.Entity("Database.PersonalizzazioneCustom", b =>
                {
                    b.Navigation("BevandaCustom");

                    b.Navigation("IngredientiPersonalizzazione");
                });

            modelBuilder.Entity("Database.PersonalizzazioneIngrediente", b =>
                {
                    b.Navigation("DimensioneQuantitaIngredienti");
                });

            modelBuilder.Entity("Database.StatoOrdine", b =>
                {
                    b.Navigation("ConfigSoglieTempi");

                    b.Navigation("Ordine");

                    b.Navigation("StatoStoricoOrdine");
                });

            modelBuilder.Entity("Database.StatoPagamento", b =>
                {
                    b.Navigation("Ordine");
                });

            modelBuilder.Entity("Database.Tavolo", b =>
                {
                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Database.TaxRates", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Database.UnitaDiMisura", b =>
                {
                    b.Navigation("DimensioneBicchiere");

                    b.Navigation("PersonalizzazioneIngrediente");
                });

            modelBuilder.Entity("Database.Utenti", b =>
                {
                    b.Navigation("LogAccessi");
                });
#pragma warning restore 612, 618
        }
    }
}
